name: CI/CD

on:
  push

env:
  MANIFEST_FILE_NAME: "system.json"
  PUBLIC_PATH: "public"
  PACKAGE_FILE_NAME: "investigator.zip"
  PACKAGE_PATH: package
  DOWNLOAD_BASE: "https://github.com/${{github.repository}}/releases/download"

jobs:
  parse_tag:
    runs-on: ubuntu-latest
    outputs:
      tag_version: ${{ steps.get_tag_version.outputs.group1 }}
      tag_prerelease: ${{ steps.get_tag_version.outputs.group2 }}
    steps:
      - name: Get tag versions
        if: github.ref_type == 'tag'
        id: get_tag_version
        uses: actions-ecosystem/action-regex-match@v2.0.2
        with:
          regex: '^refs/tags\/(v\d+\.\d+\.\d+(?:$|(-[a-z0-9._-]+)))'
          text: ${{ github.ref }}

  instrument_parse_tag:
    runs-on: ubuntu-latest
    needs: parse_tag
    steps:
      - name: Instrument tags capture
        run: |
          echo "tag_version: ${{ needs.parse_tag.outputs.tag_version }}"
          echo "tag_prerelease: ${{ needs.parse_tag.outputs.tag_prerelease }}"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: parse_tag
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Activate pnpm
        run: corepack enable

      - name: Instrumentation
        run: |
          pwd
          ls -l
          cat tsconfig.json
          export
          node --version
          pnpm --version

      - name: Install dependencies
        run: pnpm i

      - name: Instrument tsc version
        run: npx tsc --version

      - name: Update manifest
        if: needs.parse_tag.outputs.tag_version != ''
        env:
          CI_COMMIT_TAG: ${{ needs.parse_tag.outputs.tag_version }}
          CI_PROJECT_PATH: ${{ github.repository }}
        run: |
          echo "CI_COMMIT_TAG: $CI_COMMIT_TAG"
          echo "CI_PROJECT_PATH: $CI_PROJECT_PATH"
          ./tasks.js updateManifestFromCITagPush
          cat $MANIFEST_PATH

      - name: Test
        run: pnpm test

      - name: Build
        run: pnpm package

      - name: Upload package file
        uses: actions/upload-artifact@v3
        with:
          name: package-zip
          path: ${{env.PACKAGE_PATH}}/${{env.PACKAGE_FILE_NAME}}

      - name: Upload manifest
        uses: actions/upload-artifact@v3
        with:
          name: manifest
          path: ${{env.PUBLIC_PATH}}/${{env.MANIFEST_FILE_NAME}}

  publish:
    needs:
      - build
      - parse_tag
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
    if: needs.parse_tag.outputs.tag_version != ''
    steps:
      - uses: actions/checkout@v3

      - name: publish
        uses: ./.github/actions/publish
        with:
          version: ${{needs.parse_tag.outputs.tag_version}}
          prerelease: ${{needs.parse_tag.outputs.tag_prerelease}}
          manifest_file_name: ${{env.MANIFEST_FILE_NAME}}
          package_file_name: ${{env.PACKAGE_FILE_NAME}}
          download_base: ${{env.DOWNLOAD_BASE}}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      # secrets:
        #   envPAT: ${{ secrets.envPAT }}


  # publish-old:
  #   needs:
  #     - build
  #     - parse_tag
  #   runs-on: ubuntu-latest
  #   environment: release
  #   permissions:
  #     contents: write
  #   if: needs.parse_tag.outputs.tag_version != ''
  #   env:
  #     version: ${{ needs.parse_tag.outputs.tag_version }}
  #     prerelease: ${{ needs.parse_tag.outputs.tag_prerelease }}
  #   steps:
  #     - name: Download package
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: package-zip

  #     - name: Download manifest
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: manifest

  #     - name: Look around
  #       run: |
  #         pwd
  #         ls -l

  #     - name: Update Release With Files
  #       uses: ncipollo/release-action@v1
  #       with:
  #         allowUpdates: true
  #         name: ${{ env.version }}
  #         prerelease: ${{ env.prerelease != '' }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         removeArtifacts: true
  #         replacesArtifacts: true
  #         artifacts: './${{env.MANIFEST_FILE_NAME}}, ./${{env.PACKAGE_FILE_NAME}}'
  #         tag: ${{ env.version }}
  #         body: >
  #           **Installation:** To manually install this release, please use the
  #           following manifest URL:
  #           ${{env.DOWNLOAD_BASE}}/${{env.version}}/${{env.MANIFEST_FILE_NAME}}
